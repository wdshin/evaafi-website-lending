{"version":3,"sources":["pages/Saas Onepage/scrollSpy.js","pages/Saas Onepage/NavbarPage.js"],"names":["ScrollspyNav","props","scrollSection","scrollSectionOffsetTop","scrollTargetIds","forEach","sectionID","index","document","getElementById","offsetTop","headerBackground","querySelector","scrollHeight","window","pageYOffset","getNavLinkElement","classList","add","activeNavClass","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","scrollDuration","Number","router","homeDefaultLink","hashIdentifier","bind","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","scrollTo","setTimeout","this","navHref","includes","replace","addEventListener","event","preventDefault","location","hash","querySelectorAll","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","removeEventListener","excludeSectionID","className","children","Component","NavbarPage","toggleRightDrawer","setState","position","open","state","onDrawerClose","navItems","id","idnm","navheading","toggleLine","prevState","isOpen","activateMenu","targetId","map","item","Fragment","src","logodark","height","alt","onClick","disabled","icon","style","display","key","href","onClose","RightSidebar"],"mappings":"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","file":"static/js/4.ca514e56.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ScrollspyNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.props = props;\r\n    this.scrollTargetIds = this.props.scrollTargetIds;\r\n    this.activeNavClass = this.props.activeNavClass;\r\n    this.scrollDuration = Number(this.props.scrollDuration) || 1000;\r\n    this.headerBackground =\r\n      this.props.headerBackground === \"true\" ? true : false;\r\n\r\n    if (this.props.router && this.props.router === \"HashRouter\") {\r\n      this.homeDefaultLink = \"#/\";\r\n      this.hashIdentifier = \"#/#\";\r\n    } else {\r\n      this.homeDefaultLink = \"/\";\r\n      this.hashIdentifier = \"#\";\r\n    }\r\n    this.scrollSection.bind(this);\r\n  }\r\n\r\n  easeInOutQuad(current_time, start, change, duration) {\r\n    current_time /= duration / 2;\r\n    if (current_time < 1)\r\n      return (change / 2) * current_time * current_time + start;\r\n    current_time--;\r\n    return (-change / 2) * (current_time * (current_time - 2) - 1) + start;\r\n  }\r\n\r\n  scrollTo(start, to, duration) {\r\n    let change = to - start,\r\n      currentTime = 0,\r\n      increment = 10;\r\n\r\n    let animateScroll = () => {\r\n      currentTime += increment;\r\n      let val = this.easeInOutQuad(currentTime, start, change, duration);\r\n      window.scrollTo(0, val);\r\n      if (currentTime < duration) {\r\n        setTimeout(animateScroll, increment);\r\n      }\r\n    };\r\n\r\n    animateScroll();\r\n  }\r\n\r\n  getNavLinkElement(sectionID) {\r\n    return document.querySelector(\r\n      `a[href='${this.hashIdentifier}${sectionID}']`\r\n    );\r\n  }\r\n\r\n  getNavToSectionID(navHref) {\r\n    return navHref.includes(this.hashIdentifier)\r\n      ? navHref.replace(this.hashIdentifier, \"\")\r\n      : \"\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\r\n      document\r\n        .querySelector(`a[href='${this.homeDefaultLink}']`)\r\n        .addEventListener(\"click\", (event) => {\r\n          event.preventDefault();\r\n          this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n          window.location.hash = \"\";\r\n        });\r\n    }\r\n\r\n    document\r\n      .querySelector(\"div[data-nav='list']\")\r\n      .querySelectorAll(\"a\")\r\n      .forEach((navLink) => {\r\n        navLink.addEventListener(\"click\", (event) => {\r\n          event.preventDefault();\r\n          let sectionID = this.getNavToSectionID(navLink.getAttribute(\"href\"));\r\n\r\n          if (sectionID) {\r\n            let scrollTargetPosition =\r\n              document.getElementById(sectionID).offsetTop -\r\n              (this.headerBackground\r\n                ? document.querySelector(\"div[data-nav='list']\").scrollHeight\r\n                : 0);\r\n            this.scrollTo(\r\n              window.pageYOffset,\r\n              scrollTargetPosition,\r\n              this.scrollDuration\r\n            );\r\n          } else {\r\n            this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n          }\r\n        });\r\n      });\r\n\r\n    window.addEventListener(\"scroll\", this.scrollSection, true);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"scroll\", this.scrollSection, true);\r\n  }\r\n\r\n  scrollSection = () => {\r\n    let scrollSectionOffsetTop;\r\n    this.scrollTargetIds.forEach((sectionID, index) => {\r\n      scrollSectionOffsetTop =\r\n        document.getElementById(sectionID).offsetTop -\r\n        (this.headerBackground\r\n          ? document.querySelector(\"div[data-nav='list']\").scrollHeight\r\n          : 0);\r\n\r\n      if (\r\n        window.pageYOffset >= scrollSectionOffsetTop &&\r\n        window.pageYOffset <\r\n          scrollSectionOffsetTop +\r\n            document.getElementById(sectionID).scrollHeight\r\n      ) {\r\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\r\n          this.activeNavClass\r\n        );\r\n        this.clearOtherNavLinkActiveStyle(sectionID);\r\n      } else {\r\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\r\n          this.activeNavClass\r\n        );\r\n      }\r\n\r\n      if (\r\n        window.innerHeight + window.pageYOffset >= document.body.scrollHeight &&\r\n        index === this.scrollTargetIds.length - 1\r\n      ) {\r\n        this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.add(\r\n          this.activeNavClass\r\n        );\r\n        this.clearOtherNavLinkActiveStyle(sectionID);\r\n      }\r\n    });\r\n  };\r\n  clearOtherNavLinkActiveStyle(excludeSectionID) {\r\n    this.scrollTargetIds.forEach((sectionID, index) => {\r\n      if (sectionID !== excludeSectionID) {\r\n        this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n        this.getNavLinkElement(sectionID).parentNode.classList.remove(\r\n          this.activeNavClass\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div data-nav=\"list\" className={this.props.className}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScrollspyNav;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container } from \"reactstrap\";\r\nimport ScrollspyNav from \"./scrollSpy\";\r\n\r\n//Import Images\r\nimport logodark from \"../../assets/images/logo-dark.png\";\r\n\r\nimport RightSidebar from '../../components/Layout/RightSidebar';\r\n\r\n//React Drawer\r\nimport ReactDrawer from 'react-drawer';\r\nimport 'react-drawer/lib/react-drawer.css';\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nclass NavbarPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      navItems: [\r\n        { id: 1, idnm: \"home\", navheading: \"Home\" },\r\n        { id: 3, idnm: \"service\", navheading: \"Feature\" },\r\n        { id: 3, idnm: \"testimonial\", navheading: \"Review\" },\r\n        { id: 4, idnm: \"pricing\", navheading: \"Price\" },\r\n        { id: 6, idnm: \"contact\", navheading: \"Contact\" },\r\n      ],\r\n      open: false,\r\n      position: 'right',\r\n    };\r\n    this.toggleLine = this.toggleLine.bind(this);\r\n    this.toggleRightDrawer = this.toggleRightDrawer.bind(this);\r\n    this.onDrawerClose = this.onDrawerClose.bind(this);\r\n  }\r\n\r\n  toggleLine() {\r\n    this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n  }\r\n  toggleRightDrawer = () => {\r\n    this.setState({ position: 'right' });\r\n    this.setState({ open: !this.state.open });\r\n  };\r\n  onDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  initMenu() {\r\n    this.activateMenu();\r\n  }\r\n\r\n  render() {\r\n    //Store all Navigationbar Id into TargetID variable(Used for Scrollspy)\r\n    let targetId = this.state.navItems.map((item) => {\r\n      return item.idnm;\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <header id=\"topnav\" className=\"defaultscroll sticky\">\r\n          <Container>\r\n            <div>\r\n              <Link className=\"logo\" to=\"#\">\r\n                <img src={logodark} height=\"24\" alt=\"\" />\r\n              </Link>\r\n            </div>\r\n            <ul className=\"buy-button list-inline mb-0\">\r\n              <li className=\"list-inline-item mb-0 me-1 settingbtn\">\r\n                <Link to=\"#\" onClick={this.toggleRightDrawer} disabled={this.state.open}>\r\n                  <div className=\"btn btn-icon btn-pills btn-soft-primary\">\r\n                    <FeatherIcon\r\n                      icon=\"settings\"\r\n                      className=\"fea icon-sm\"\r\n                    />\r\n                  </div>\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-inline-item button mb-0 ps-1 shoppingbtn\">\r\n                <Link to=\"//1.envato.market/landrickreactjs\" className=\"btn btn-icon btn-pills btn-primary\">\r\n                  <FeatherIcon\r\n                    icon=\"shopping-cart\"\r\n                    className=\"fea icon-sm\"\r\n                  />\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className=\"menu-extras\">\r\n              <div className=\"menu-item\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={this.toggleLine}\r\n                  className={\r\n                    this.state.isOpen ? \"navbar-toggle open\" : \"navbar-toggle\"\r\n                  }\r\n                >\r\n                  <div className=\"lines\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            <ScrollspyNav\r\n              scrollTargetIds={targetId}\r\n              scrollDuration=\"800\"\r\n              headerBackground=\"false\"\r\n              activeNavClass=\"active\"\r\n            >\r\n              <div\r\n                id=\"navigation\"\r\n                style={{ display: this.state.isOpen ? \"block\" : \"none\" }}\r\n              >\r\n                <ul className=\"navigation-menu\">\r\n                  {this.state.navItems.map((item, key) => (\r\n                    <li\r\n                      key={key}\r\n                      className={\r\n                        item.navheading === \"Home\"\r\n                          ? \"has-submenu active\"\r\n                          : \"has-submenu\"\r\n                      }\r\n                    >\r\n                      <a href={\"#\" + item.idnm}> {item.navheading}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            </ScrollspyNav>\r\n          </Container>\r\n        </header>\r\n        <ReactDrawer\r\n          open={this.state.open}\r\n          position={this.state.position}\r\n          onClose={this.onDrawerClose}\r\n        >\r\n          <RightSidebar onClose={this.onDrawerClose} />\r\n        </ReactDrawer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n"],"sourceRoot":""}